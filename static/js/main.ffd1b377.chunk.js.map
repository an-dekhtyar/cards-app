{"version":3,"sources":["n1-main/m1-ui/Header/Header.module.css","n2-features/h1-auth/a2-registration/Registration.module.css","n1-main/m1-ui/Common/Input/Input.module.css","n2-features/h1-auth/a4-restore-pass/RestorePass.module.css","n2-features/h1-auth/a5-enter-new-pass/EnterNewPass.module.css","n1-main/m1-ui/Common/Button/Button.module.css","n2-features/h1-auth/a1-login/Login.module.css","n1-main/m1-ui/Common/Checkbox/Checkbox.module.css","n1-main/m1-ui/Common/Input/Input.tsx","n1-main/m1-ui/Common/Button/Button.tsx","API/ApiCards.tsx","n1-main/m2-bll/auth-reducer.ts","assets/images/preloader.svg","n1-main/m1-ui/Common/Preloader/Preloader.tsx","n2-features/h1-auth/a2-registration/Registration.tsx","n2-features/h1-auth/a3-profile/Profile.tsx","n2-features/h1-auth/assets/image/logo.png","n2-features/h1-auth/a4-restore-pass/CheckEmailNotify.tsx","n2-features/h1-auth/a4-restore-pass/SendInstruction.tsx","n1-main/m2-bll/restore-pass-reducer.ts","n2-features/h1-auth/a4-restore-pass/RestorePass.tsx","n2-features/h1-auth/a5-enter-new-pass/EnterNewPass.tsx","n2-features/h1-auth/a5-enter-new-pass/EnterNewPassContain.tsx","n1-main/m2-bll/login-reducer.ts","n2-features/h1-auth/a1-login/Login.tsx","n1-main/m1-ui/Common/Checkbox/Checkbox.tsx","n2-features/f0-test/Test.tsx","n1-main/m4-pages/a4-page404/Page404.tsx","n1-main/m1-ui/Routes/Routes.tsx","n1-main/m1-ui/Header/Header.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m2-bll/store.ts","n1-main/m2-bll/profile-reducer.ts","n1-main/m1-ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","value","restProps","finalSpanClassName","s","finalInputClassName","errorInput","superInput","inputContain","placeholder","e","currentTarget","key","Button","red","finalClassName","default","contain","children","instance","axios","create","baseURL","withCredentials","ApiCards","email","password","post","data","from","message","newPassword","token","resetPasswordToken","initialState","Preloader","src","preloader","Registration","useState","setEmail","password1","setPassword1","password2","setPassword2","buttonOn","setbuttonOn","setError","errorFromServer","setErrorFromServer","redirect","setRedirect","setPreloader","dispath","useDispatch","loginForm","useSelector","state","auth","statusLoginForm","find","f","onclickHandler","dispatch","then","res","addUserAC","config","console","log","catch","addUserACThunk","setTimeout","useEffect","st","registrationPage","to","PasswordError","onClick","map","m","Profile","profilePage","CheckEmailNotify","props","userEmail","SendInstruction","setValue","Input","getInstruction","PATH","LOGIN","isNotifySent","isFetching","isNewPasswordSet","SET_EMAIL","NOTIFY_SENT","TOGGLE_IS_FETCHING","PASSWORD_SET_SUCCESS","toggleIsFetching","getInstructionTC","resp","success","err","setNewPassword","mainLogo","backgroundImage","logo","RestorePass","restorePass","restorePassContain","style","restorePassContent","EnterNewPass","createNewPassword","EnterNewPassContain","location","useLocation","pathname","substring","lastIndexOf","enterNewPass","enterNewPassContain","enterNewPassContent","isLoading","isAuth","_id","name","rememberMe","avatar","publicCardPacksCount","created","updated","isAdmin","verified","toggleIsLoading","payload","Login","setPassword","setRememberMe","login","PROFILE","loginPage","checked","ENTER_NEW_PASS","a","response","LoginData","disabled","REGISTRATION","Checkbox","onChangeChecked","checkbox","Test","Page404","PAGE_404","RESTORE_PASS","TEST","Routes","path","exact","render","Header","header","headerContain","headerLink","Main","reducers","combineReducers","action","newState","newItemLoginForm","profile","store","createStore","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd1b377.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2kfeU\",\"headerLink\":\"Header_headerLink__F3len\",\"headerContain\":\"Header_headerContain__3B74T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonOn\":\"Registration_buttonOn__3y4k-\",\"PasswordError\":\"Registration_PasswordError__1VGQU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"Input_superInput__1rP-f\",\"errorInput\":\"Input_errorInput__2mPvP\",\"error\":\"Input_error__3exKn\",\"inputContain\":\"Input_inputContain__E7V0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restorePass\":\"RestorePass_restorePass__u2y86\",\"restorePassContain\":\"RestorePass_restorePassContain__3udnY\",\"restorePassContent\":\"RestorePass_restorePassContent__2qZLq\",\"logo\":\"RestorePass_logo__1UQEt\",\"emailLogo\":\"RestorePass_emailLogo__34YFc\",\"loader\":\"RestorePass_loader__3Gdn9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enterNewPass\":\"EnterNewPass_enterNewPass__1Etry\",\"enterNewPassContain\":\"EnterNewPass_enterNewPassContain__1zUTp\",\"enterNewPassContent\":\"EnterNewPass_enterNewPassContent__f01H0\",\"logo\":\"EnterNewPass_logo__36p30\",\"emailLogo\":\"EnterNewPass_emailLogo__32Tqq\",\"loader\":\"EnterNewPass_loader__3uuZM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3_p0N\",\"red\":\"Button_red__25F_8\",\"contain\":\"Button_contain__30O3h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__2Jic3\",\"isLoading\":\"Login_isLoading__1u6fn\",\"error\":\"Login_error__3XxSo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__3m37W\",\"spanClassName\":\"Checkbox_spanClassName__1Mhrp\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './Input.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    // @ts-ignore\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    value?:string\r\n    placeholder?:string\r\n\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n        value,\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${error ? s.errorInput: s.superInput}  ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <span className={s.inputContain}>\r\n            <span>\r\n            <input\r\n                type={type}\r\n                placeholder={restProps.placeholder}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\nvalue={value}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            </span>\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './Button.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nexport const Button: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n    return (\r\n        <span className={s.contain}>\r\n        <button\r\n            className={finalClassName}\r\n            children={restProps.children}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n\r\n      </span>\r\n    )\r\n}\r\n\r\n","import axios from 'axios';\r\nimport {LoginDataType} from '../n1-main/m2-bll/login-reducer';\r\n\r\n\r\nlet instance = axios.create({\r\n    //baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n    // headers:{\r\n    //     'API-KEY': '0e5dc50f-7e9f-4eda-9157-a63c5026aaad2'\r\n    // }\r\n})\r\n\r\nexport const ApiCards = {\r\n    ping() {\r\n        return instance.get(`ping`)\r\n    },\r\n    addUser(email: string, password: string) {\r\n        return instance.post('/auth/register', {email: email, password: password})\r\n    },\r\n    login(data: LoginDataType) {\r\n        return instance.post<LoginResponseType>('/auth/login', {...data})\r\n    },\r\n    getInstruction(email: string) {\r\n        return instance.post('auth/forgot', {\r\n            email,\r\n            from: 'test-front-admin <ai73a@yandex.by>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\"> To change your password, please follow the link:<a href='http://localhost:3000/#/new-pass/$token$'>link</a></div>`\r\n        })\r\n    },\r\n    setNewPassword(newPassword: string, token: string) {\r\n        return instance.post('auth/set-new-password', {\r\n                password: newPassword,\r\n                resetPasswordToken: token\r\n            },\r\n        )\r\n    }\r\n}\r\n// {\r\n//     email: \"nya-admin@nya.nya\"\r\n//     password: \"1qazxcvBG\"\r\n// }\r\n\r\n\r\n//types\r\n\r\nexport type LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    created: Date\r\n    updated: Date\r\n    isAdmin: boolean\r\n    verified: boolean\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\n\r\nimport {ApiCards} from \"../../API/ApiCards\";\r\n\r\n\r\nlet initialState:Array<string>=[]\r\n\r\nexport const authReducer = (state = initialState, action: addUserType) => {\r\n    switch (action.type){\r\n        case 'addUser':{\r\n            let newState=[...state]\r\n            let newItemLoginForm = {email: action.email, password1: action.password}\r\n            // setloginForm([...loginForm, newItemLoginForm])\r\n                return [...newState, newItemLoginForm]\r\n        }\r\n        default :return state\r\n    }\r\n};\r\n\r\nexport type addUserType=ReturnType<typeof addUserAC>\r\n\r\nexport const addUserAC =(email:string,password:string,data:{email:string,password:string})=>{\r\n    return {\r\n        type:'addUser',\r\n        email:email,\r\n        password:password,\r\n            }as const\r\n}\r\nexport const addUserACThunk=(email:string,password:string,setRedirect:(value:boolean)=>void,setPreloader:(value:boolean)=>void,setErrorFromServer:(value:string)=>void)=>(dispatch:Dispatch)=>{\r\n    setPreloader(true)\r\n    ApiCards.addUser(email, password)\r\n        .then((res) => {\r\n            dispatch(addUserAC(email,password,res.config.data));\r\n            setPreloader(false)\r\n            setRedirect(true)\r\n            console.log(res.config.data)\r\n        })\r\n        .catch((res)=>{\r\n            console.log(res)\r\n            setPreloader(false)\r\n            setErrorFromServer('Email already exists, or your Password must be more than 7 characters...')\r\n        })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/preloader.576a7a69.svg\";","import React from 'react';\r\nimport styles from './../../Users/Users.module.css'\r\nimport preloader from \"../../../../assets/images/preloader.svg\";\r\n\r\nexport const Preloader=()=>{\r\n    return(\r\n        <div >\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport st from './Registration.module.css'\r\nimport SuperInputText from \"../../../n1-main/m1-ui/Common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/Common/Button/Button\";\r\nimport {ApiCards} from \"../../../API/ApiCards\";\r\nimport {addUserAC, addUserACThunk, authReducer} from \"../../../n1-main/m2-bll/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Preloader} from \"../../../n1-main/m1-ui/Common/Preloader/Preloader\";\r\n\r\nexport type setRegistrationType = {\r\n    email: '',\r\n    password1: '',\r\n    password2: ''\r\n}\r\n\r\nexport const Registration = () => {\r\n    let [email, setEmail] = useState('')\r\n    let [password1, setPassword1] = useState('')\r\n    let [password2, setPassword2] = useState('')\r\n    let [buttonOn, setbuttonOn] = useState(false)\r\n    let [error, setError] = useState('')\r\n    let [errorFromServer, setErrorFromServer] = useState('')\r\n    let [redirect, setRedirect] = useState(false)\r\n    let [preloader, setPreloader] = useState(false)\r\n\r\n    let dispath = useDispatch()\r\n    let loginForm = useSelector<AppStoreType, Array<setRegistrationType>>(state => state.auth)\r\n    let statusLoginForm = loginForm.find((f) => f.email)\r\n\r\n    let onclickHandler = () => {\r\n        setbuttonOn(true);\r\n        if (password1 === password2) {\r\n            setError('')\r\n            // dispath(addUserAC(email, password1, password2))\r\n                   dispath(addUserACThunk(email, password1, setRedirect, setPreloader, setErrorFromServer))\r\n        } else {\r\n            setError('Check YOUR PASSWORD')\r\n            setTimeout(() => {\r\n                setError('false')\r\n            }, 3000)\r\n        }\r\n\r\n        setEmail('')\r\n        setPassword1('')\r\n        setPassword2('')\r\n    }\r\n\r\n    useEffect(() => {\r\n        // ApiCards.ping()\r\n        //     .then((res)=>{\r\n        //         console.log(res)\r\n        //     })\r\n    }, [])\r\n\r\n    console.log(statusLoginForm)\r\n\r\n    return (\r\n        <div className={st.registrationPage}>\r\n            {preloader && <Preloader/>}\r\n            {redirect && <Redirect to={'/login'}/>}\r\n            <h1>REGISTRATION PAGE</h1>\r\n            <SuperInputText value={email} onChangeText={setEmail} placeholder={'Enter your EMAIL'}/>\r\n            <SuperInputText value={password1} onChangeText={setPassword1} placeholder={'Enter your PASSWORD'}/>\r\n            <SuperInputText value={password2} onChangeText={setPassword2} placeholder={'Enter your PASSWORD AGAIN'}/>\r\n\r\n            <div className={st.PasswordError}>{error}</div>\r\n            <div className={st.PasswordError}>{errorFromServer}</div>\r\n            <Button children={'Send'} onClick={() => onclickHandler()}/>\r\n\r\n            {buttonOn &&\r\n            loginForm.map((m: setRegistrationType) => {\r\n                return (\r\n                    <div className={st.buttonOn}>\r\n                        <div>Your Login={m.email}</div>\r\n                        <div>Your Password={m.password1}</div>\r\n                    </div>\r\n                )\r\n            })\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n//====================================================================================================================\r\n// import React, {useEffect, useState} from 'react';\r\n// import st from './Registration.module.css'\r\n// import SuperInputText from \"../../../n1-main/m1-ui/Common/Input/Input\";\r\n// import {Button} from \"../../../n1-main/m1-ui/Common/Button/Button\";\r\n// import {ApiCards} from \"../../../API/ApiCards\";\r\n// import {addUserAC, addUserACThunk, authReducer} from \"../../../n1-main/m2-bll/auth-reducer\";\r\n// import {useDispatch, useSelector} from \"react-redux\";\r\n// import {AppStoreType} from \"../../../n1-main/m2-bll/store\";\r\n// import {Redirect} from 'react-router-dom';\r\n// import {Preloader} from \"../../../n1-main/m1-ui/Common/Preloader/Preloader\";\r\n//\r\n// export type setRegistrationType = {\r\n//     email: '',\r\n//     password1: '',\r\n//     password2: ''\r\n// }\r\n//\r\n// export const Registration = () => {\r\n//     let [email, setEmail] = useState('')\r\n//     let [password1, setPassword1] = useState('')\r\n//     let [password2, setPassword2] = useState('')\r\n//     let [buttonOn, setbuttonOn] = useState(false)\r\n//     let [error, setError] = useState('')\r\n//     let [errorFromServer, setErrorFromServer] = useState('')\r\n//     let [redirect, setRedirect] = useState(false)\r\n//     let [preloader, setPreloader] = useState(false)\r\n//\r\n//     let dispath = useDispatch()\r\n//     let loginForm = useSelector<AppStoreType, Array<setRegistrationType>>(state => state.auth)\r\n//     let statusLoginForm = loginForm.find((f) => f.email)\r\n//\r\n//     let onclickHandler = () => {\r\n//         setbuttonOn(true);\r\n//         if (password1 === password2) {\r\n//             setError('')\r\n//             // dispath(addUserAC(email, password1, password2))\r\n//             dispath(addUserACThunk(email, password1, setRedirect, setPreloader, setErrorFromServer))\r\n//         } else {\r\n//             setError('Check YOUR PASSWORD')\r\n//             setTimeout(() => {\r\n//                 setError('false')\r\n//             }, 3000)\r\n//         }\r\n//         if (password1.length < 7) {\r\n//             setError('Password must be more than 7 characters...')\r\n//         }\r\n//         setEmail('')\r\n//         setPassword1('')\r\n//         setPassword2('')\r\n//     }\r\n//\r\n//     useEffect(() => {\r\n//         // ApiCards.ping()\r\n//         //     .then((res)=>{\r\n//         //         console.log(res)\r\n//         //     })\r\n//     }, [])\r\n//     console.log(statusLoginForm)\r\n//\r\n//     return (\r\n//         <div className={st.registrationPage}>\r\n//             {preloader && <Preloader/>}\r\n//             {redirect && <Redirect to={'/login'}/>}\r\n//             <h1>REGISTRATION PAGE</h1>\r\n//             <SuperInputText value={email} onChangeText={setEmail} placeholder={'Enter your EMAIL'}/>\r\n//             <SuperInputText value={password1} onChangeText={setPassword1} placeholder={'Enter your PASSWORD'}/>\r\n//             <SuperInputText value={password2} onChangeText={setPassword2} placeholder={'Enter your PASSWORD AGAIN'}/>\r\n//\r\n//             <div className={st.PasswordError}>{error}</div>\r\n//             <div className={st.PasswordError}>{errorFromServer}</div>\r\n//             <Button children={'Send'} onClick={() => onclickHandler()}/>\r\n//\r\n//             {buttonOn &&\r\n//             loginForm.map((m: setRegistrationType) => {\r\n//                 return (\r\n//                     <div className={st.buttonOn}>\r\n//                         <div>Your Login={m.email}</div>\r\n//                         <div>Your Password={m.password1}</div>\r\n//                     </div>\r\n//                 )\r\n//             })\r\n//             }\r\n//         </div>\r\n//     )\r\n// };\r\n","import React from 'react';\r\nimport st from './Profile.module.css'\r\n\r\nexport const Profile = () => (\r\n    <div className={st.profilePage}>\r\n        <h1>PROFILE PAGE</h1>\r\n    </div>\r\n);\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.70fefd3f.png\";","import React from \"react\";\r\n\r\ntype CheckEmailNotifyType = {\r\n    userEmail: string\r\n}\r\n\r\nexport const CheckEmailNotify = (props: CheckEmailNotifyType) => {\r\n\r\n    return (\r\n        <>\r\n            <span>Check Email</span>\r\n            <span>We’ve sent an Email with instructions to {props.userEmail}</span>\r\n        </>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport Input from \"../../../n1-main/m1-ui/Common/Input/Input\";\r\nimport {Button} from \"../../../n1-main/m1-ui/Common/Button/Button\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/Routes/Routes\";\r\n\r\nexport const SendInstruction = (props: SendInstructionType) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const onClickHandler = () => {\r\n        props.getInstruction(value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Forgot your password?</h1>\r\n            <Input value={value} onChangeText={setValue}/>\r\n            <span>Enter your email address and we will send you further instruction</span>\r\n            <Button children={'Send Instructions'} onClick={onClickHandler}/>\r\n            <span>Did you remember your password?</span>\r\n            <NavLink to={PATH.LOGIN}>Try logging in</NavLink>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\ntype SendInstructionType = {\r\n    getInstruction: (email: string) => void\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {ApiCards} from \"../../API/ApiCards\";\r\n\r\nconst initialState = {\r\n    email: '',\r\n    isNotifySent: false,\r\n    isFetching: true,\r\n    isNewPasswordSet: false\r\n}\r\n\r\nexport const restorePassReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_EMAIL:\r\n            return {...state, email: action.email};\r\n        case NOTIFY_SENT:\r\n            return {...state, isNotifySent: action.isNotifySent};\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching};\r\n        case PASSWORD_SET_SUCCESS:\r\n            return {...state, isNewPasswordSet: action.isNewPasswordSet}\r\n        default:\r\n            return state\r\n    }\r\n\r\n};\r\n\r\n//action types\r\nconst SET_EMAIL = 'cards-app/restore-pass/SET_EMAIL'\r\nconst NOTIFY_SENT = 'cards-app/restore-pass/NOTIFY_SENT'\r\nconst TOGGLE_IS_FETCHING = 'cards-app/restore-pass/TOGGLE_IS_FETCHING'\r\nconst PASSWORD_SET_SUCCESS = 'cards-app/restore-pass/PASSWORD_SET_SUCCESS'\r\n\r\n//action-creators\r\nconst setEmail = (email: string) => ({type: SET_EMAIL, email} as const)\r\nconst notifySent = (isNotifySent: boolean) => ({type: NOTIFY_SENT, isNotifySent} as const)\r\nconst toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nconst passwordSetSuccess = (isNewPasswordSet: boolean) => ({type: PASSWORD_SET_SUCCESS, isNewPasswordSet} as const)\r\n\r\n//thunk\r\nexport const getInstructionTC = (email: string) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(false))\r\n    ApiCards.getInstruction(email)\r\n        .then((resp) => {\r\n                resp.data.success &&\r\n                dispatch(setEmail(email))\r\n                dispatch(toggleIsFetching(true))\r\n                dispatch(notifySent(true))\r\n\r\n            }\r\n        ).catch((err) => {\r\n        err &&\r\n        console.log('Some Error')\r\n        dispatch(toggleIsFetching(true))\r\n\r\n    })\r\n}\r\nexport const setNewPassword = (newPassword: string, token: string) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFetching(false))\r\n    ApiCards.setNewPassword(newPassword, token)\r\n        .then((resp) => {\r\n            resp.data &&\r\n            dispatch(passwordSetSuccess(true))\r\n            dispatch(toggleIsFetching(true))\r\n        })\r\n        .catch((err) => {\r\n            err &&\r\n            dispatch(toggleIsFetching(true))\r\n        })\r\n}\r\n//types\r\ntype ActionType =\r\n    | ReturnType<typeof setEmail>\r\n    | ReturnType<typeof notifySent>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof passwordSetSuccess>\r\n\r\ntype InitialStateType = {\r\n    email: string\r\n    isNotifySent: boolean\r\n    isFetching: boolean\r\n    isNewPasswordSet: boolean\r\n}\r\n","import React from 'react';\r\nimport st from './RestorePass.module.css';\r\nimport logo from '../assets/image/logo.png'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {AppStoreType} from '../../../n1-main/m2-bll/store';\r\nimport {CheckEmailNotify} from \"./CheckEmailNotify\";\r\nimport { SendInstruction } from './SendInstruction';\r\nimport {Preloader} from \"../../../n1-main/m1-ui/Common/Preloader/Preloader\";\r\nimport {getInstructionTC} from \"../../../n1-main/m2-bll/restore-pass-reducer\";\r\n\r\n\r\nconst mainLogo = {\r\n    backgroundImage: `url(${logo})`,\r\n}\r\n\r\n\r\nexport const RestorePass = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const userEmail = useSelector<AppStoreType, string>(state => state.restorePass.email)\r\n    const isNotifySent = useSelector<AppStoreType, boolean>(state => state.restorePass.isNotifySent)\r\n    const isFetching = useSelector<AppStoreType, boolean>(state => state.restorePass.isFetching)\r\n\r\n    const getInstruction = (email: string) => {\r\n        dispatch(getInstructionTC(email))\r\n    }\r\n\r\n    return (\r\n        <div className={st.restorePass}>\r\n            <div className={st.restorePassContain}>\r\n                <div className={st.logo} style={mainLogo} />\r\n                {isFetching\r\n                    ? <div className={st.restorePassContent}>\r\n                        {isNotifySent\r\n                            ? <CheckEmailNotify userEmail={userEmail}/>\r\n                            : <SendInstruction getInstruction={getInstruction}/>\r\n                        }\r\n                    </div>\r\n                    : <Preloader/>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport {Button} from '../../../n1-main/m1-ui/Common/Button/Button';\r\nimport Input from '../../../n1-main/m1-ui/Common/Input/Input';\r\n\r\n\r\nexport const EnterNewPass = (props: EnterNewPassType) => {\r\n\r\n    const {value, setValue, createNewPassword} = props\r\n\r\n    const onClickHandler = () => {\r\n        createNewPassword(value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>Create new password</h1>\r\n            <Input value={value} onChangeText={setValue}/>\r\n            <span>Create new password</span>\r\n            <Button children={'Create new password'} onClick={onClickHandler}/>\r\n        </>\r\n    )\r\n}\r\n\r\n//Types\r\ntype EnterNewPassType = {\r\n    value: string\r\n    setValue: (value: string) => void\r\n    createNewPassword: (value: string) => void\r\n}","import logo from \"../assets/image/logo.png\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStoreType} from \"../../../n1-main/m2-bll/store\";\r\nimport {Redirect, useLocation} from \"react-router-dom\";\r\nimport st from \"./EnterNewPass.module.css\";\r\n\r\nimport {PATH} from \"../../../n1-main/m1-ui/Routes/Routes\";\r\nimport {EnterNewPass} from \"./EnterNewPass\";\r\nimport {Preloader} from \"../../../n1-main/m1-ui/Common/Preloader/Preloader\";\r\nimport { setNewPassword } from \"../../../n1-main/m2-bll/restore-pass-reducer\";\r\n\r\n\r\n\r\nexport const EnterNewPassContain = () => {\r\n\r\n    const mainLogo = {\r\n        backgroundImage: `url(${logo})`\r\n    }\r\n\r\n    const [value, setValue] = useState('')\r\n    const isNewPasswordSet = useSelector<AppStoreType, boolean>(state => state.restorePass.isNewPasswordSet)\r\n    const isFetching = useSelector<AppStoreType, boolean>(state => state.restorePass.isFetching)\r\n    const dispatch = useDispatch()\r\n    const location = useLocation()\r\n\r\n    let token = location.pathname.substring(location.pathname.lastIndexOf('/') + 1)\r\n\r\n    const createNewPassword = (newPassword: string) => {\r\n        dispatch(setNewPassword(newPassword, token))\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className={st.enterNewPass}>\r\n            <div className={st.enterNewPassContain}>\r\n                <div className={st.logo} style={mainLogo}/>\r\n                <div className={st.enterNewPassContent}>\r\n                    {isFetching\r\n                        ? <EnterNewPass value={value} setValue={setValue} createNewPassword={createNewPassword}/>\r\n                        : <Preloader/>\r\n                    }\r\n                    {isNewPasswordSet && <Redirect to={PATH.LOGIN}/>}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import {ThunkAction} from 'redux-thunk';\r\nimport {AppStoreType} from './store';\r\nimport {ApiCards, LoginResponseType} from '../../API/ApiCards';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    isAuth: false,\r\n    _id: null as string | null,\r\n    email: null as string | null,\r\n    name: null as string | null,\r\n    rememberMe: false,\r\n    avatar: null as string | null,\r\n    publicCardPacksCount: null as number | null,\r\n    created: null as Date | null,\r\n    updated: null as Date | null,\r\n    isAdmin: false,\r\n    verified: false,\r\n    error: null as string | null\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: LoginActionsType): LoginReducerStateType => {\r\n    switch (action.type) {\r\n        case 'cards-app/login/SET-USER-PARAMS':\r\n        case 'cards-app/login/SET-ERROR':\r\n        case 'cards-app/login/TOGGLE-IS-LOADING':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n};\r\n\r\n\r\n//action creators\r\n\r\nexport const toggleIsLoading = (isLoading: boolean) => ({\r\n    type: 'cards-app/login/TOGGLE-IS-LOADING',\r\n    payload: {\r\n        isLoading\r\n    }\r\n} as const);\r\n\r\nexport const setUserParams = (LoginData: LoginResponseType) => ({\r\n    type: 'cards-app/login/SET-USER-PARAMS',\r\n    payload: {\r\n        ...LoginData\r\n    }\r\n} as const)\r\n\r\nexport const setError = (error: string | null) => ({\r\n    type: 'cards-app/login/SET-ERROR',\r\n    payload: {\r\n        error\r\n    }\r\n} as const)\r\n\r\nexport const setIsAuthorized = (isAuth: boolean) => ({\r\n    type: 'cards-app/login/SET-ERROR',\r\n    payload: {\r\n        isAuth\r\n    }\r\n} as const)\r\n\r\n\r\n//thunk creators\r\n\r\nexport const loginTC = (data: LoginDataType): ThunkAction<void, AppStoreType, unknown, LoginActionsType> => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsLoading(true));\r\n        try {\r\n            const response = await ApiCards.login(data);\r\n            dispatch(setUserParams(response.data));\r\n            dispatch(setIsAuthorized(true));\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in console');\r\n            dispatch(setError(error));\r\n        }\r\n        dispatch(toggleIsLoading(false));\r\n    }\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type LoginReducerStateType = typeof initialState;\r\n\r\ntype LoginActionsType = ReturnType<typeof toggleIsLoading>\r\n    | ReturnType<typeof setUserParams>\r\n    | ReturnType<typeof setError>\r\n    | ReturnType<typeof setIsAuthorized>\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport st from './Login.module.css'\r\nimport {PATH} from '../../../n1-main/m1-ui/Routes/Routes';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../n1-main/m2-bll/store';\r\nimport SuperInputText from '../../../n1-main/m1-ui/Common/Input/Input';\r\nimport {Button} from '../../../n1-main/m1-ui/Common/Button/Button';\r\nimport {loginTC, setError} from '../../../n1-main/m2-bll/login-reducer';\r\n\r\nexport const Login: React.FC = () => {\r\n\r\n    //state\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState<string>('');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppStoreType, boolean>(state => state.login.isAuth);\r\n    const error = useSelector<AppStoreType, string | null>(state => state.login.error);\r\n    const isLoading = useSelector<AppStoreType, boolean>(state => state.login.isLoading);\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    //functions\r\n    const onEmailInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value);\r\n    }\r\n    const onPasswordInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value);\r\n    }\r\n    const onRememberMeInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(e.currentTarget.checked);\r\n    }\r\n    const onSubmitClick = () => {\r\n        dispatch(setError(null));\r\n        dispatch(loginTC({email, password, rememberMe}));\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={st.loginPage}>\r\n            <h1>LOGIN PAGE</h1>\r\n            {isLoading && <span className={st.isLoading}>loading</span>}\r\n            {error && <span className={st.error}>{error}</span>}\r\n            <label>Email <SuperInputText type={'email'}\r\n                                         value={email}\r\n                                         placeholder={'example@gmail.com'}\r\n                                         onChange={onEmailInputChange}/>\r\n            </label>\r\n            <label>\r\n                Password <SuperInputText type={'password'}\r\n                                         value={password}\r\n                                         onChange={onPasswordInputChange}/>\r\n            </label>\r\n            <label>Remember me <input type={'checkbox'}\r\n                                      checked={rememberMe}\r\n                                      onChange={onRememberMeInputChange}/>\r\n            </label>\r\n            <NavLink to={PATH.ENTER_NEW_PASS}>Forgot Password</NavLink>\r\n            <Button onClick={onSubmitClick}\r\n                    disabled={isLoading}>Login</Button>\r\n            <p>Don't have an account?</p>\r\n            <NavLink to={PATH.REGISTRATION}>Sing up</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Checkbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n    // сделайте так чтоб работал onChange и onChangeChecked\r\n\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Button} from \"../../n1-main/m1-ui/Common/Button/Button\";\r\nimport {Checkbox} from \"../../n1-main/m1-ui/Common/Checkbox/Checkbox\";\r\nimport Input from '../../n1-main/m1-ui/Common/Input/Input';\r\n\r\nexport const Test = () => (\r\n    <div>\r\n        <h1>TEST PAGE</h1>\r\n        <Button children={\"Button\"}/>\r\n        <Input/>\r\n        <Checkbox/>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nexport const Page404 = () => (\r\n    <div>\r\n        <h1>404</h1>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch } from 'react-router-dom';\r\nimport {Registration, Profile, RestorePass, EnterNewPassContain, Test, Login} from \"../../../n2-features\";\r\nimport {Page404} from \"../../m4-pages/a4-page404/Page404\";\r\n\r\n\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTRATION: '/registration',\r\n    PROFILE: '/profile',\r\n    PAGE_404:'/404',\r\n    RESTORE_PASS:'/restore-pass',\r\n    ENTER_NEW_PASS:'/new-pass',\r\n    TEST:'/test',\r\n}\r\n\r\n\r\nexport const Routes = () => (\r\n    <div>\r\n        <Switch>\r\n\r\n            <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n            <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n            <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n            <Route path={PATH.RESTORE_PASS} render={() => <RestorePass/>}/>\r\n            <Route path={PATH.ENTER_NEW_PASS} render={() => <EnterNewPassContain/>}/>\r\n            <Route path={PATH.TEST} render={() => <Test/>}/>\r\n            <Route path={PATH.PAGE_404} render={() => <Page404/>}/>\r\n\r\n            <Redirect from={'*'} to={PATH.PAGE_404}/>\r\n        </Switch>\r\n\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport st from './Header.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport {PATH} from \"../Routes/Routes\";\r\n\r\n\r\n\r\n\r\nexport const Header = () => (\r\n    <div className={st.header}>\r\n        <div className={st.headerContain}>\r\n            <NavLink to={PATH.LOGIN} className={st.headerLink}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTRATION} className={st.headerLink}>Registration</NavLink>\r\n            <NavLink to={PATH.PROFILE} className={st.headerLink}>Profile</NavLink>\r\n            <NavLink to={PATH.PAGE_404} className={st.headerLink}>404</NavLink>\r\n            <NavLink to={PATH.RESTORE_PASS} className={st.headerLink}>Restore Password</NavLink>\r\n            <NavLink to={PATH.ENTER_NEW_PASS} className={st.headerLink}>Enter new Password</NavLink>\r\n            <NavLink to={PATH.TEST} className={st.headerLink}>Test Super Components</NavLink>\r\n        </div>\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport {Header} from \"../Header/Header\";\r\nimport { Routes } from '../Routes/Routes';\r\n\r\n\r\nexport const Main = () => (\r\n    <div >\r\n        <Header/>\r\n\r\n        <Routes/>\r\n    </div>\r\n);\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {authReducer, } from \"./auth-reducer\";\r\nimport {loginReducer} from \"./login-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {restorePassReducer} from \"./restore-pass-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    auth:authReducer,\r\n    login:loginReducer,\r\n    profile:profileReducer,\r\n    restorePass:restorePassReducer\r\n})\r\n\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>","\r\n\r\n\r\n\r\n\r\nexport const profileReducer = (state = {}, action: any): any => { // fix any\r\n\r\n\r\n        return state;\r\n\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {Main} from \"./Main/Main\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"../m2-bll/store\";\r\n\r\nconst App = () => (\r\n    <div className=\"App\">\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <Main/>\r\n            </HashRouter>\r\n        </Provider>\r\n    </div>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}